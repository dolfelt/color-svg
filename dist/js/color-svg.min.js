var ColorSVG={version:"0.1.0",settings:{current_color:null,size:40,multiplier:8,row_width:20,animation_speed:250,animation_type:"backout"},NS:"http://www.w3.org/2000/svg",init:function(t,i){var a=this;this.scope=t||"input.color-picker";var e=this.scope instanceof jQuery?this.scope:$(this.scope);$.extend(!0,this.settings,i),e.length>0&&e.each(function(){var t=$(this);return t.is(":input")&&t.attr("type","hidden").data("options",{color:t.val()}),a.build(t,i)})},setColor:function(t,i,a){if(!a)var e=$(this.identifier(t)),a=$("svg",e);i&&6==i.length&&(i="#"+i);var n=Snap($(".selected-color",a)[0]);n.attr({opacity:i?1:0,fill:i||"#000000"}),t.is(":input")&&(t.val(i),i&&t.trigger("change"))},build:function(t,i){var a=$.extend({},this.settings,i,t.data("options"));if(t.data("settings",a),!t.data("color-id")){var e="color"+Math.round(1e4*Math.random()),n=$('<div id="'+e+'" class="color-svg-picker"/>');t.data("color-id",e),$(t).after(n),n.width(a.size).height(a.size)}var r=this;setTimeout(function(){r.updateDOM(r.picker(t)),r.events(t,a)},1)},events:function(t,i){var a=this;$("svg",this.identifier(t)).hover(function(e){var n=i.size+2*a.padding(i);$(this).width(n).height(n)[0].setAttribute("viewBox",["0 0",n,n].join(" ")),$(this).css({margin:-a.padding(i)}),a.animateHover(t,i)},function(e){a.close(t,i,this)})},close:function(t,i,a){var e=i.size,n=a||$("svg",this.identifier(t)),r=this.padding(i);this.animateHover(t,i,function(){$(n).width(e).height(e)[0].setAttribute("viewBox",[r,r,e,e].join(" ")),$(n).css({margin:0})})},updateDOM:function(t){var i=t[0],a=t[1];return $(this.identifier(i)).html(a)},animateHover:function(t,i,a){for(var e=$(this.identifier(t)),n=$("svg",e),r=i.size+2*this.padding(i),s=r/2,o=r/2,c=$("g[data-id]",n),d=0;d<c.length;d++){var h=c[d],f=parseInt(h.getAttribute("data-id").replace("g",""),10),l=a?1:f+2,u=0==d,v=i.animation_type,p=i.animation_speed*(d+1);if(!f){if(!a){var g=i.size/2;l=(g-5)/g}v="easein",p=1.5*i.animation_speed}Snap(h).stop().animate({transform:"s"+l+" "+l+" "+s+" "+o},p,mina[v],u?a||null:null)}var m=$(".selected-color",n)[0],b=Snap(m);b.stop().animate({transform:"s"+l+" "+l+" "+s+" "+o},p,mina[v])},picker:function(t){var i=t.data("settings"),a=this.svg(t,i),e=$(this.identifier(t)),n=e.outerWidth(),r=this.padding(i),s=this.defaultColors.slice();s.reverse();for(var o=0;o<s.length;o++)for(var c=0,d=1/s[o].length*Math.PI*2,h=s[o],f=s.length-(o+1),l=0;l<h.length;l++){var u=c+d,v=n/2+r,p=n/2+r,g=n/2,m=g-5,b=[f,l].join(""),_=$('path[data-id="s'+b+'"]',a);if(_.length>0)var M=_[0];else var M=this.svg_obj("path");this.annular_sector(M,{centerX:v,centerY:p,startDegrees:c,endDegrees:u,innerRadius:0==f?0:(m+(f-1)*i.row_width)/(f+2),outerRadius:0==f?g:(m+f*i.row_width)/(f+2)}),this.set_attr(M,{fill:"#"+h[l],"data-cx":v,"data-cy":p,"data-id":"s"+b});var w=$("g[data-id=g"+f+"]",a);if(w.length<1){var R=this.svg_obj("g");R.setAttribute("data-id","g"+f),R.appendChild(M),a.appendChild(R)}else w[0].appendChild(M);if(f){var j=Snap(M);this.animate(j,v,p,i,f),this.action(j,t,i)}c=u}var C=Snap(a),k=C.circle(v,p,n/2+.1),y=Snap(a).circle(v,p,n/2-5);k.attr({"class":"selected-color"}),this.setColor(t,i.color,a),y.attr({"class":"icon"});var S=this.svg_obj("g"),z=this.svg_obj("path");return this.set_attr(S,{transform:"translate("+[v-7,p-7].join(" ")+")"}),this.set_attr(z,{d:"M3.4,12.8L4.2,12L2,9.8l-0.8,0.8v1h1.2v1.2H3.4z M8.2,4.2C8.2,4.1,8.1,4,8,4c-0.1,0-0.1,0-0.2,0.1l-5,5c0,0-0.1,0.1-0.1,0.2c0,0.1,0.1,0.2,0.2,0.2c0.1,0,0.1,0,0.2-0.1l5-5C8.2,4.4,8.2,4.3,8.2,4.2z M7.7,2.5l3.8,3.8L3.8,14H0v-3.8 L7.7,2.5z M14,3.4c0,0.3-0.1,0.6-0.3,0.8l-1.5,1.5L8.3,1.9l1.5-1.5C10,0.1,10.3,0,10.6,0c0.3,0,0.6,0.1,0.8,0.4l2.2,2.2 C13.9,2.8,14,3,14,3.4z","class":"pencil"}),S.appendChild(z),a.appendChild(S),[t,a]},action:function(t,i,a){var e=this;t.click(function(t){var n=Snap(t.target),r=n.attr("fill");n.attr({strokeWidth:0}),e.setColor(i,r),e.close(i,a)})},animate:function(t,i,a,e,n){var r=1,s=r+.05;t.hover(function(t){var r=Snap(t.target);r.appendTo(r.parent()),r.attr({strokeWidth:1/(n+2)}),r.stop().animate({transform:"s"+s+" "+s+" "+i+" "+a},e.animation_speed,mina[e.animation_type])},function(t){var n=Snap(t.target);n.attr({strokeWidth:0}),n.stop().animate({transform:"s"+r+" "+r+" "+i+" "+a},e.animation_speed,mina[e.animation_type])})},annular_sector:function(t,i){function a(t){var i={cx:t.centerX||0,cy:t.centerY||0,startRadians:t.startDegrees||0,closeRadians:t.endDegrees||0},a=void 0!==t.thickness?t.thickness:100;return i.r1=void 0!==t.innerRadius?t.innerRadius:void 0!==t.outerRadius?t.outerRadius-a:200-a,i.r2=void 0!==t.outerRadius?t.outerRadius:i.r1+a,i.r1<0&&(i.r1=0),i.r2<0&&(i.r2=0),i}var e=a(i),n=[[e.cx+e.r2*Math.sin(e.startRadians),e.cy-e.r2*Math.cos(e.startRadians)],[e.cx+e.r2*Math.sin(e.closeRadians),e.cy-e.r2*Math.cos(e.closeRadians)],[e.cx+e.r1*Math.sin(e.closeRadians),e.cy-e.r1*Math.cos(e.closeRadians)],[e.cx+e.r1*Math.sin(e.startRadians),e.cy-e.r1*Math.cos(e.startRadians)]],r=e.closeRadians-e.startRadians,s=r%(2*Math.PI)>Math.PI?1:0,o=[];o.push("M"+n[0].join()),o.push("A"+[e.r2,e.r2,0,s,1,n[1]].join()),o.push("L"+n[2].join()),o.push("A"+[e.r1,e.r1,0,s,0,n[3]].join()),o.push("z"),this.set_attr(t,{stroke:"white","stroke-width":0,d:o.join(" ")})},padding:function(t){return(this.defaultColors.length-1)*t.row_width},svg:function(t,i){var a=$(this.identifier(t)),e=$("svg",a),n=a.width(),r=a.height();if(e.length>0)e=e[0];else{var e=this.svg_obj("svg");e.width=n,e.height=r}var s=this.padding(i),o=s+" "+s+" "+n+" "+r;return this.set_attr(e,{width:"100%",height:"100%",viewBox:o}),e},identifier:function(t){return"#"+t.data("color-id")},throttle:function(t,i){var a=null;return function(){var e=this,n=arguments;clearTimeout(a),a=setTimeout(function(){t.apply(e,n)},i)}},svg_obj:function(t){return document.createElementNS(this.NS,t)},ticks:function(t,a,e){var n=a-t,r=Math.pow(10,Math.floor(Math.log(n/e)/Math.LN10)),s=e/n*r;.15>=s?r*=10:.35>=s?r*=5:.75>=s&&(r*=2);var o=Math.ceil(t/r)*r,c=Math.floor(a/r)*r+.5*r,d=[];for(i=o;i<c;i+=r)d.push(i);return d},set_attr:function(t,i){for(attr in i)t.setAttribute(attr,i[attr]);return this},flip:function(t,i){t.setAttribute("transform","translate(0, "+i+") scale(1, -1)")},defaultColors:[["ff5c4d","ffb84d","ffff4d","baff4d","61b8b2","615cff","9e79df","ba5cb2"],["c81717","f45f21","ffd800","00952a","00b19a","174aa7","6954c4","b03faa"],["982424","f13434","ff9264","ba4717","cdae00","ffeb7d","00cc39","006e1f","008574","1df3d7","3576ec","234075","4a3b8c","9981ff","ec59e4","812c7c"],["7a0e2d","9c2b41","d25b73","fe6080","fe943e","cd6612","95490c","6c3101","a17900","d19d00","ffc000","d3c162","bcff76","88ec1f","279a52","326100","104e46","4b877f","6fbbb1","a6eae1","35aeec","2491b0","0d647d","004255","330e71","5400a3","8300ff","b76aff","e12bec","a10faa","730a7a","4b0050"]]};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbG9yLXN2Zy5taW4uanMiXSwibmFtZXMiOlsiQ29sb3JTVkciLCJ2ZXJzaW9uIiwic2V0dGluZ3MiLCJjdXJyZW50X2NvbG9yIiwic2l6ZSIsIm11bHRpcGxpZXIiLCJyb3dfd2lkdGgiLCJhbmltYXRpb25fc3BlZWQiLCJhbmltYXRpb25fdHlwZSIsIk5TIiwiaW5pdCIsInNjb3BlIiwib3B0aW9ucyIsInNlbGYiLCJ0aGlzIiwicGlja2VycyIsImpRdWVyeSIsIiQiLCJleHRlbmQiLCJsZW5ndGgiLCJlYWNoIiwiaW5wdXQiLCJpcyIsImF0dHIiLCJkYXRhIiwiY29sb3IiLCJ2YWwiLCJidWlsZCIsInNldENvbG9yIiwic3ZnIiwiY29udGFpbmVyIiwiaWRlbnRpZmllciIsImNpcmNsZSIsIlNuYXAiLCJvcGFjaXR5IiwiZmlsbCIsInRyaWdnZXIiLCJfc2V0dGluZ3MiLCJpZCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImRpdiIsImFmdGVyIiwid2lkdGgiLCJoZWlnaHQiLCJzZXRUaW1lb3V0IiwidXBkYXRlRE9NIiwicGlja2VyIiwiZXZlbnRzIiwiaG92ZXIiLCJlIiwiZGltZW4iLCJwYWRkaW5nIiwic2V0QXR0cmlidXRlIiwiam9pbiIsImNzcyIsIm1hcmdpbiIsImFuaW1hdGVIb3ZlciIsImNsb3NlIiwiZWxlbSIsInBhcnRzIiwiZ3JhcGgiLCJodG1sIiwiY2xvc2VfY2FsbGJhY2siLCJiYXNlIiwiY3giLCJjeSIsImdyb3VwcyIsImciLCJncm91cCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwicmVwbGFjZSIsInNjYWxlIiwiZG9fY2FsbGJhY2siLCJhbmltYXRpb24iLCJzcGVlZCIsImhhbGYiLCJzdG9wIiwiYW5pbWF0ZSIsInRyYW5zZm9ybSIsIm1pbmEiLCJjaXIiLCJvdXRlcldpZHRoIiwiX2NvbG9ycyIsImRlZmF1bHRDb2xvcnMiLCJzbGljZSIsInJldmVyc2UiLCJjIiwic3RhcnRfYW5nbGUiLCJhbmdsZSIsIlBJIiwibGV2ZWwiLCJpIiwiZW5kX2FuZ2xlIiwiciIsImlubmVyUiIsInBpZCIsImV4aXN0aW5nX3BhdGgiLCJwYXRoIiwic3ZnX29iaiIsImFubnVsYXJfc2VjdG9yIiwiY2VudGVyWCIsImNlbnRlclkiLCJzdGFydERlZ3JlZXMiLCJlbmREZWdyZWVzIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInNldF9hdHRyIiwiZGF0YS1jeCIsImRhdGEtY3kiLCJkYXRhLWlkIiwiZXhpc3RpbmdfZ3JvdXAiLCJhcHBlbmRDaGlsZCIsImVsIiwiYWN0aW9uIiwic25wIiwiY29sb3JlZENpcmNsZSIsImNpcmNsZU92ZXJsYXkiLCJjbGFzcyIsInBlbmNpbCIsInBpbm5lciIsImQiLCJjbGljayIsInRhcmdldCIsInN0cm9rZVdpZHRoIiwiYmFzZV9zY2FsZSIsImFwcGVuZFRvIiwicGFyZW50Iiwib3B0aW9uc1dpdGhEZWZhdWx0cyIsIm8iLCJvMiIsInN0YXJ0UmFkaWFucyIsImNsb3NlUmFkaWFucyIsInQiLCJ1bmRlZmluZWQiLCJ0aGlja25lc3MiLCJyMSIsInIyIiwib3B0cyIsInAiLCJzaW4iLCJjb3MiLCJhbmdsZURpZmYiLCJsYXJnZUFyYyIsImNtZHMiLCJwdXNoIiwic3Ryb2tlIiwic3Ryb2tlLXdpZHRoIiwidmlld19ib3giLCJ2aWV3Qm94IiwidGhyb3R0bGUiLCJmdW4iLCJkZWxheSIsInRpbWVyIiwiY29udGV4dCIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJhcHBseSIsInR5cGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInRpY2tzIiwibWluIiwibWF4IiwiY291bnQiLCJzcGFuIiwic3RlcCIsInBvdyIsImZsb29yIiwibG9nIiwiTE4xMCIsImVyciIsInRzdGFydCIsImNlaWwiLCJ0c3RvcCIsIm5vZGUiLCJhdHRycyIsImZsaXAiLCJoIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxXQUNBQyxRQUFVLFFBRVZDLFVBQ0lDLGNBQWUsS0FDZkMsS0FBTSxHQUNOQyxXQUFZLEVBQ1pDLFVBQVcsR0FDWEMsZ0JBQWlCLElBQ2pCQyxlQUFnQixXQUdwQkMsR0FBSyw2QkFFTEMsS0FBTyxTQUFVQyxFQUFPQyxHQUNwQixHQUFJQyxHQUFPQyxJQUNYQSxNQUFLSCxNQUFRQSxHQUFTLG9CQUV0QixJQUFJSSxHQUFVRCxLQUFLSCxnQkFBaUJLLFFBQVNGLEtBQUtILE1BQVFNLEVBQUVILEtBQUtILE1BRWpFTSxHQUFFQyxRQUFPLEVBQU1KLEtBQUtaLFNBQVVVLEdBRTFCRyxFQUFRSSxPQUFTLEdBQ2pCSixFQUFRSyxLQUFLLFdBQ1QsR0FBSUMsR0FBUUosRUFBRUgsS0FNZCxPQUxJTyxHQUFNQyxHQUFHLFdBQ1RELEVBQU1FLEtBQUssT0FBTyxVQUNaQyxLQUFLLFdBQVlDLE1BQU9KLEVBQU1LLFFBR2pDYixFQUFLYyxNQUFNTixFQUFPVCxNQU9yQ2dCLFNBQVcsU0FBU1AsRUFBT0ksRUFBT0ksR0FDOUIsSUFBS0EsRUFDRCxHQUFJQyxHQUFZYixFQUFFSCxLQUFLaUIsV0FBV1YsSUFDOUJRLEVBQU1aLEVBQUUsTUFBT2EsRUFHbkJMLElBQXlCLEdBQWhCQSxFQUFNTixTQUFhTSxFQUFRLElBQU1BLEVBRTlDLElBQUlPLEdBQVNDLEtBQUtoQixFQUFFLGtCQUFtQlksR0FBSyxHQUM1Q0csR0FBT1QsTUFDSFcsUUFBU1QsRUFBUSxFQUFJLEVBQ3JCVSxLQUFNVixHQUFTLFlBR2ZKLEVBQU1DLEdBQUcsWUFDVEQsRUFBTUssSUFBSUQsR0FFTkEsR0FDQUosRUFBTWUsUUFBUSxZQUsxQlQsTUFBUSxTQUFTTixFQUFPVCxHQUNwQixHQUFJeUIsR0FBWXBCLEVBQUVDLFVBQVdKLEtBQUtaLFNBQVVVLEVBQVNTLEVBQU1HLEtBQUssV0FHaEUsSUFGQUgsRUFBTUcsS0FBSyxXQUFZYSxJQUVsQmhCLEVBQU1HLEtBQUssWUFBYSxDQUN6QixHQUFJYyxHQUFLLFFBQVVDLEtBQUtDLE1BQW9CLElBQWRELEtBQUtFLFVBQy9CQyxFQUFNekIsRUFBRSxZQUFZcUIsRUFBRywrQkFDM0JqQixHQUFNRyxLQUFLLFdBQVljLEdBQ3ZCckIsRUFBRUksR0FBT3NCLE1BQU1ELEdBQ2ZBLEVBQUlFLE1BQU1QLEVBQVVqQyxNQUFNeUMsT0FBT1IsRUFBVWpDLE1BRS9DLEdBQUlTLEdBQU9DLElBQ1hnQyxZQUFXLFdBQ1BqQyxFQUFLa0MsVUFBVWxDLEVBQUttQyxPQUFPM0IsSUFDM0JSLEVBQUtvQyxPQUFPNUIsRUFBT2dCLElBQ3BCLElBR1BZLE9BQVMsU0FBVTVCLEVBQU9uQixHQUN0QixHQUFJVyxHQUFPQyxJQUVYRyxHQUFFLE1BQU9ILEtBQUtpQixXQUFXVixJQUFRNkIsTUFBTSxTQUFTQyxHQUM1QyxHQUFJQyxHQUFRbEQsRUFBU0UsS0FBOEIsRUFBdkJTLEVBQUt3QyxRQUFRbkQsRUFDekNlLEdBQUVILE1BQU04QixNQUFNUSxHQUFPUCxPQUFPTyxHQUFPLEdBQUdFLGFBQWEsV0FBWSxNQUFNRixFQUFNQSxHQUFPRyxLQUFLLE1BQ3ZGdEMsRUFBRUgsTUFBTTBDLEtBQUtDLFFBQVM1QyxFQUFLd0MsUUFBUW5ELEtBRW5DVyxFQUFLNkMsYUFBYXJDLEVBQU9uQixJQUMxQixTQUFTaUQsR0FDUnRDLEVBQUs4QyxNQUFNdEMsRUFBT25CLEVBQVVZLFNBSXBDNkMsTUFBTyxTQUFVdEMsRUFBT25CLEVBQVUyQixHQUM5QixHQUFJdUIsR0FBUWxELEVBQVNFLEtBQ2pCd0QsRUFBTy9CLEdBQU9aLEVBQUUsTUFBT0gsS0FBS2lCLFdBQVdWLElBQ3ZDZ0MsRUFBVXZDLEtBQUt1QyxRQUFRbkQsRUFFM0JZLE1BQUs0QyxhQUFhckMsRUFBT25CLEVBQVUsV0FDL0JlLEVBQUUyQyxHQUFNaEIsTUFBTVEsR0FBT1AsT0FBT08sR0FBTyxHQUFHRSxhQUFhLFdBQVlELEVBQVFBLEVBQVFELEVBQU1BLEdBQU9HLEtBQUssTUFDakd0QyxFQUFFMkMsR0FBTUosS0FBS0MsT0FBUSxPQUk3QlYsVUFBWSxTQUFVYyxHQUNsQixHQUFJeEMsR0FBUXdDLEVBQU0sR0FDZEMsRUFBUUQsRUFBTSxFQUVsQixPQUFPNUMsR0FBRUgsS0FBS2lCLFdBQVdWLElBQVEwQyxLQUFLRCxJQUcxQ0osYUFBZSxTQUFTckMsRUFBT25CLEVBQVU4RCxHQVNyQyxJQUFLLEdBUkRsQyxHQUFZYixFQUFFSCxLQUFLaUIsV0FBV1YsSUFDOUJRLEVBQU1aLEVBQUUsTUFBT2EsR0FDZm1DLEVBQU8vRCxFQUFTRSxLQUErQixFQUF2QlUsS0FBS3VDLFFBQVFuRCxHQUNyQ2dFLEVBQUtELEVBQUssRUFDVkUsRUFBS0YsRUFBTSxFQUVYRyxFQUFTbkQsRUFBRSxhQUFjWSxHQUVwQndDLEVBQUksRUFBR0EsRUFBSUQsRUFBT2pELE9BQVFrRCxJQUFLLENBQ3BDLEdBQUlDLEdBQVFGLEVBQU9DLEdBQ2YvQixFQUFLaUMsU0FBU0QsRUFBTUUsYUFBYSxXQUFXQyxRQUFRLElBQUksSUFBSyxJQUM3REMsRUFBUVYsRUFBaUIsRUFBSTFCLEVBQUssRUFDbENxQyxFQUFtQixHQUFMTixFQUNkTyxFQUFZMUUsRUFBU00sZUFDckJxRSxFQUFRM0UsRUFBU0ssaUJBQW1COEQsRUFBRSxFQUUxQyxLQUFLL0IsRUFBSSxDQUNMLElBQUswQixFQUFnQixDQUNqQixHQUFJYyxHQUFPNUUsRUFBU0UsS0FBSyxDQUN6QnNFLElBQVNJLEVBQUssR0FBS0EsRUFFdkJGLEVBQVksU0FDWkMsRUFBbUMsSUFBM0IzRSxFQUFTSyxnQkFHckIwQixLQUFLcUMsR0FBT1MsT0FBT0MsU0FDakJDLFVBQVcsSUFBTVAsRUFBUSxJQUFNQSxFQUFRLElBQU1SLEVBQUssSUFBTUMsR0FDdkRVLEVBQU9LLEtBQUtOLEdBQVlELEVBQWNYLEdBQWtCLEtBQU8sTUFHdEUsR0FBSWhDLEdBQVNmLEVBQUUsa0JBQW1CWSxHQUFLLEdBQ25Dc0QsRUFBTWxELEtBQUtELEVBQ2ZtRCxHQUFJSixPQUFPQyxTQUNQQyxVQUFXLElBQU1QLEVBQVEsSUFBTUEsRUFBUSxJQUFNUixFQUFLLElBQU1DLEdBQ3pEVSxFQUFPSyxLQUFLTixLQUduQjVCLE9BQVEsU0FBUzNCLEdBQ2IsR0FBSW5CLEdBQVdtQixFQUFNRyxLQUFLLFlBQ3RCSyxFQUFNZixLQUFLZSxJQUFJUixFQUFPbkIsR0FDdEI0QixFQUFZYixFQUFFSCxLQUFLaUIsV0FBV1YsSUFDOUI0QyxFQUFPbkMsRUFBVXNELGFBQ2pCL0IsRUFBVXZDLEtBQUt1QyxRQUFRbkQsR0FFdkJtRixFQUFVdkUsS0FBS3dFLGNBQWNDLE9BQ2pDRixHQUFRRyxTQUlSLEtBQUssR0FBSUMsR0FBRSxFQUFHQSxFQUFJSixFQUFRbEUsT0FBUXNFLElBTzlCLElBQUssR0FMREMsR0FBYyxFQUNkQyxFQUFTLEVBQUlOLEVBQVFJLEdBQUd0RSxPQUFVb0IsS0FBS3FELEdBQUssRUFDNUNwRSxFQUFPNkQsRUFBUUksR0FDZkksRUFBUVIsRUFBUWxFLFFBQVVzRSxFQUFFLEdBRXZCSyxFQUFJLEVBQUdBLEVBQUl0RSxFQUFLTCxPQUFRMkUsSUFBSyxDQUNsQyxHQUFJQyxHQUFZTCxFQUFjQyxFQUMxQnpCLEVBQU1ELEVBQU8sRUFBS1osRUFDbEJjLEVBQU1GLEVBQU8sRUFBS1osRUFDbEIyQyxFQUFNL0IsRUFBTyxFQUNiZ0MsRUFBU0QsRUFBSSxFQUNiRSxHQUFPTCxFQUFNQyxHQUFHdkMsS0FBSyxJQUVyQjRDLEVBQWdCbEYsRUFBRSxrQkFBb0JpRixFQUFNLEtBQU1yRSxFQUV0RCxJQUFJc0UsRUFBY2hGLE9BQVMsRUFDdkIsR0FBSWlGLEdBQU9ELEVBQWMsT0FFekIsSUFBSUMsR0FBT3RGLEtBQUt1RixRQUFRLE9BRzVCdkYsTUFBS3dGLGVBQWVGLEdBQ2hCRyxRQUFRckMsRUFBSXNDLFFBQVFyQyxFQUNwQnNDLGFBQWFmLEVBQWFnQixXQUFXWCxFQUNyQ1ksWUFBb0IsR0FBUGQsRUFBVyxHQUFNSSxHQUFXSixFQUFNLEdBQUszRixFQUFTSSxZQUFldUYsRUFBTSxHQUNsRmUsWUFBb0IsR0FBUGYsRUFBV0csR0FBTUMsRUFBVSxFQUFVL0YsRUFBU0ksWUFBZXVGLEVBQU0sS0FFcEYvRSxLQUFLK0YsU0FBU1QsR0FDVmpFLEtBQU0sSUFBSVgsRUFBS3NFLEdBR2ZnQixVQUFZNUMsRUFDWjZDLFVBQVk1QyxFQUNaNkMsVUFBWSxJQUFNZCxHQUd0QixJQUFJZSxHQUFpQmhHLEVBQUUsY0FBZ0I0RSxFQUFRLElBQUtoRSxFQUVwRCxJQUFJb0YsRUFBZTlGLE9BQVMsRUFBRyxDQUMzQixHQUFJa0QsR0FBSXZELEtBQUt1RixRQUFRLElBRXJCaEMsR0FBRWYsYUFBYSxVQUFXLElBQU11QyxHQUNoQ3hCLEVBQUU2QyxZQUFZZCxHQUNkdkUsRUFBSXFGLFlBQVk3QyxPQUloQjRDLEdBQWUsR0FBR0MsWUFBWWQsRUFHbEMsSUFBSVAsRUFBTyxDQUNQLEdBQUlzQixHQUFLbEYsS0FBS21FLEVBQ2R0RixNQUFLa0UsUUFBUW1DLEVBQUlqRCxFQUFJQyxFQUFJakUsRUFBVTJGLEdBQ25DL0UsS0FBS3NHLE9BQU9ELEVBQUk5RixFQUFPbkIsR0FJM0J3RixFQUFjSyxFQUl0QixHQUFJc0IsR0FBTXBGLEtBQUtKLEdBQ1h5RixFQUFnQkQsRUFBSXJGLE9BQU9rQyxFQUFJQyxFQUFLRixFQUFLLEVBQUcsSUFDNUNzRCxFQUFnQnRGLEtBQUtKLEdBQUtHLE9BQU9rQyxFQUFJQyxFQUFLRixFQUFPLEVBQUcsRUFFeERxRCxHQUFjL0YsTUFDVmlHLFFBQVMsbUJBR2IxRyxLQUFLYyxTQUFTUCxFQUFPbkIsRUFBU3VCLE1BQU9JLEdBRXJDMEYsRUFBY2hHLE1BQ1ZpRyxRQUFTLFFBR2IsSUFBSUMsR0FBUzNHLEtBQUt1RixRQUFRLEtBQ3RCcUIsRUFBUzVHLEtBQUt1RixRQUFRLE9BVzFCLE9BVkF2RixNQUFLK0YsU0FBU1ksR0FDVnhDLFVBQWEsY0FBY2YsRUFBRyxFQUFFQyxFQUFHLEdBQUdaLEtBQUssS0FBSyxNQUVwRHpDLEtBQUsrRixTQUFTYSxHQUNWQyxFQUFLLDJXQUNMSCxRQUFTLFdBRWJDLEVBQU9QLFlBQVlRLEdBQ25CN0YsRUFBSXFGLFlBQVlPLElBRVJwRyxFQUFPUSxJQUduQnVGLE9BQVMsU0FBVUQsRUFBSTlGLEVBQU9uQixHQUMxQixHQUFJVyxHQUFPQyxJQUVYcUcsR0FBR1MsTUFBTSxTQUFTekUsR0FDZCxHQUFJaUQsR0FBT25FLEtBQUtrQixFQUFFMEUsUUFFZHBHLEVBQVEyRSxFQUFLN0UsS0FBSyxPQUN0QjZFLEdBQUs3RSxNQUNEdUcsWUFBYSxJQUdqQmpILEVBQUtlLFNBQVNQLEVBQU9JLEdBRXJCWixFQUFLOEMsTUFBTXRDLEVBQU9uQixNQUcxQjhFLFFBQVUsU0FBVW1DLEVBQUlqRCxFQUFJQyxFQUFJakUsRUFBVTJGLEdBQ3RDLEdBQ0lrQyxHQUFhLEVBQ2JyRCxFQUFRcUQsRUFBYSxHQUV6QlosR0FBR2pFLE1BQU0sU0FBVUMsR0FDZixHQUFJaUQsR0FBT25FLEtBQUtrQixFQUFFMEUsT0FHbEJ6QixHQUFLNEIsU0FBUzVCLEVBQUs2QixVQUVuQjdCLEVBQUs3RSxNQUNEdUcsWUFBYSxHQUFHakMsRUFBTyxLQUUzQk8sRUFBS3JCLE9BQU9DLFNBQ1JDLFVBQVcsSUFBTVAsRUFBUSxJQUFNQSxFQUFRLElBQU1SLEVBQUssSUFBTUMsR0FDekRqRSxFQUFTSyxnQkFBaUIyRSxLQUFLaEYsRUFBU00sa0JBRTVDLFNBQVUyQyxHQUNULEdBQUlpRCxHQUFPbkUsS0FBS2tCLEVBQUUwRSxPQUVsQnpCLEdBQUs3RSxNQUNEdUcsWUFBYSxJQUVqQjFCLEVBQUtyQixPQUFPQyxTQUNSQyxVQUFXLElBQU04QyxFQUFhLElBQU1BLEVBQWEsSUFBTTdELEVBQUssSUFBTUMsR0FDbkVqRSxFQUFTSyxnQkFBaUIyRSxLQUFLaEYsRUFBU00sb0JBTW5EOEYsZUFBaUIsU0FBVUYsRUFBTXhGLEdBNkI3QixRQUFTc0gsR0FBb0JDLEdBRXpCLEdBQUlDLElBQ0FsRSxHQUFlaUUsRUFBRTVCLFNBQVcsRUFDNUJwQyxHQUFlZ0UsRUFBRTNCLFNBQVcsRUFDNUI2QixhQUFnQkYsRUFBRTFCLGNBQWdCLEVBQ2xDNkIsYUFBZ0JILEVBQUV6QixZQUFnQixHQUdsQzZCLEVBQWtCQyxTQUFkTCxFQUFFTSxVQUF3Qk4sRUFBRU0sVUFBWSxHQVVoRCxPQVRvQ0wsR0FBR00sR0FBbkJGLFNBQWhCTCxFQUFFeEIsWUFBc0N3QixFQUFFeEIsWUFDckI2QixTQUFoQkwsRUFBRXZCLFlBQWlDdUIsRUFBRXZCLFlBQWMyQixFQUNoQixJQUFnQkEsRUFDeEJILEVBQUdPLEdBQW5CSCxTQUFoQkwsRUFBRXZCLFlBQXNDdUIsRUFBRXZCLFlBQ0Z3QixFQUFHTSxHQUFhSCxFQUV4REgsRUFBR00sR0FBRyxJQUFHTixFQUFHTSxHQUFLLEdBQ2pCTixFQUFHTyxHQUFHLElBQUdQLEVBQUdPLEdBQUssR0FFZFAsRUEvQ1gsR0FBSVEsR0FBT1YsRUFBb0J0SCxHQUUzQmlJLElBQ0NELEVBQUsxRSxHQUFLMEUsRUFBS0QsR0FBR3BHLEtBQUt1RyxJQUFJRixFQUFLUCxjQUM3Qk8sRUFBS3pFLEdBQUt5RSxFQUFLRCxHQUFHcEcsS0FBS3dHLElBQUlILEVBQUtQLGdCQUNuQ08sRUFBSzFFLEdBQUswRSxFQUFLRCxHQUFHcEcsS0FBS3VHLElBQUlGLEVBQUtOLGNBQzdCTSxFQUFLekUsR0FBS3lFLEVBQUtELEdBQUdwRyxLQUFLd0csSUFBSUgsRUFBS04sZ0JBQ25DTSxFQUFLMUUsR0FBSzBFLEVBQUtGLEdBQUduRyxLQUFLdUcsSUFBSUYsRUFBS04sY0FDN0JNLEVBQUt6RSxHQUFLeUUsRUFBS0YsR0FBR25HLEtBQUt3RyxJQUFJSCxFQUFLTixnQkFDbkNNLEVBQUsxRSxHQUFLMEUsRUFBS0YsR0FBR25HLEtBQUt1RyxJQUFJRixFQUFLUCxjQUM3Qk8sRUFBS3pFLEdBQUt5RSxFQUFLRixHQUFHbkcsS0FBS3dHLElBQUlILEVBQUtQLGdCQUdwQ1csRUFBWUosRUFBS04sYUFBZU0sRUFBS1AsYUFDckNZLEVBQVlELEdBQXFCLEVBQVJ6RyxLQUFLcUQsSUFBU3JELEtBQUtxRCxHQUFLLEVBQUksRUFDckRzRCxJQUNKQSxHQUFLQyxLQUFLLElBQUlOLEVBQUUsR0FBR3RGLFFBQ25CMkYsRUFBS0MsS0FBSyxLQUFLUCxFQUFLRCxHQUFHQyxFQUFLRCxHQUFHLEVBQUVNLEVBQVMsRUFBRUosRUFBRSxJQUFJdEYsUUFDbEQyRixFQUFLQyxLQUFLLElBQUlOLEVBQUUsR0FBR3RGLFFBQ25CMkYsRUFBS0MsS0FBSyxLQUFLUCxFQUFLRixHQUFHRSxFQUFLRixHQUFHLEVBQUVPLEVBQVMsRUFBRUosRUFBRSxJQUFJdEYsUUFDbEQyRixFQUFLQyxLQUFLLEtBQ1ZySSxLQUFLK0YsU0FBU1QsR0FDVmdELE9BQVUsUUFDVkMsZUFBZ0IsRUFDaEIxQixFQUFLdUIsRUFBSzNGLEtBQUssUUEyQnZCRixRQUFVLFNBQVNuRCxHQUNmLE9BQVFZLEtBQUt3RSxjQUFjbkUsT0FBTyxHQUFLakIsRUFBU0ksV0FFcER1QixJQUFNLFNBQVVSLEVBQU9uQixHQUNuQixHQUFJNEIsR0FBWWIsRUFBRUgsS0FBS2lCLFdBQVdWLElBQzlCUSxFQUFNWixFQUFFLE1BQU9hLEdBQ2ZjLEVBQVFkLEVBQVVjLFFBQ2xCQyxFQUFTZixFQUFVZSxRQUV2QixJQUFJaEIsRUFBSVYsT0FBUyxFQUNiVSxFQUFNQSxFQUFJLE9BQ1AsQ0FDSCxHQUFJQSxHQUFNZixLQUFLdUYsUUFBUSxNQUN2QnhFLEdBQUllLE1BQVFBLEVBQ1pmLEVBQUlnQixPQUFTQSxFQUdqQixHQUFJUSxHQUFVdkMsS0FBS3VDLFFBQVFuRCxHQUV2Qm9KLEVBQVdqRyxFQUFVLElBQU1BLEVBQVUsSUFDckMsRUFBVSxJQUNWLENBSUosT0FGQXZDLE1BQUsrRixTQUFTaEYsR0FBTWUsTUFBTyxPQUFRQyxPQUFRLE9BQVEwRyxRQUFTRCxJQUVyRHpILEdBR1hFLFdBQWEsU0FBVVYsR0FDbkIsTUFBTyxJQUFNQSxFQUFNRyxLQUFLLGFBRzVCZ0ksU0FBVyxTQUFTQyxFQUFLQyxHQUNyQixHQUFJQyxHQUFRLElBQ1osT0FBTyxZQUNILEdBQUlDLEdBQVU5SSxLQUFNK0ksRUFBT0MsU0FDM0JDLGNBQWFKLEdBQ2JBLEVBQVE3RyxXQUFXLFdBQ2YyRyxFQUFJTyxNQUFNSixFQUFTQyxJQUNwQkgsS0FJWHJELFFBQVUsU0FBVTRELEdBQ2hCLE1BQU9DLFVBQVNDLGdCQUFnQnJKLEtBQUtMLEdBQUl3SixJQUc3Q0csTUFBTyxTQUFVQyxFQUFLQyxFQUFLQyxHQUN2QixHQUFJQyxHQUFPRixFQUFNRCxFQUNiSSxFQUFPbEksS0FBS21JLElBQUksR0FBSW5JLEtBQUtvSSxNQUFNcEksS0FBS3FJLElBQUlKLEVBQU9ELEdBQVNoSSxLQUFLc0ksT0FDN0RDLEVBQU1QLEVBQVFDLEVBQU9DLENBR2QsTUFBUEssRUFBWUwsR0FBUSxHQUNSLEtBQVBLLEVBQVlMLEdBQVEsRUFDYixLQUFQSyxJQUFZTCxHQUFRLEVBRzdCLElBQUlNLEdBQVN4SSxLQUFLeUksS0FBS1gsRUFBTUksR0FBUUEsRUFDakNRLEVBQVExSSxLQUFLb0ksTUFBTUwsRUFBTUcsR0FBUUEsRUFBYyxHQUFQQSxFQUN4Q0wsSUFJSixLQUFLdEUsRUFBRWlGLEVBQVFqRixFQUFJbUYsRUFBT25GLEdBQUsyRSxFQUMzQkwsRUFBTWpCLEtBQUtyRCxFQUVmLE9BQU9zRSxJQUdYdkQsU0FBVyxTQUFVcUUsRUFBTUMsR0FFdkIsSUFBSzVKLE9BQVE0SixHQUNURCxFQUFLNUgsYUFBYS9CLEtBQU00SixFQUFNNUosTUFHbEMsT0FBT1QsT0FHWHNLLEtBQU8sU0FBVUYsRUFBTUcsR0FDbkJILEVBQUs1SCxhQUFhLFlBQWEsZ0JBQWtCK0gsRUFBRyxtQkFHeEQvRixnQkFHUSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFdBSUEsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxXQUlBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFdBTUEsU0FDQSxTQUNBLFNBQ0EsU0FFQSxTQUNBLFNBQ0EsU0FDQSxTQUVBLFNBQ0EsU0FDQSxTQUNBLFNBRUEsU0FDQSxTQUNBLFNBQ0EsU0FFQSxTQUNBLFNBQ0EsU0FDQSxTQUVBLFNBQ0EsU0FDQSxTQUNBLFNBRUEsU0FDQSxTQUNBLFNBQ0EsU0FFQSxTQUNBLFNBQ0EsU0FDQSIsImZpbGUiOiJjb2xvci1zdmcubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIENvbG9yU1ZHID0ge1xuICAgIHZlcnNpb24gOiAnMC4xLjAnLFxuXG4gICAgc2V0dGluZ3MgOiB7XG4gICAgICAgIGN1cnJlbnRfY29sb3I6IG51bGwsXG4gICAgICAgIHNpemU6IDQwLFxuICAgICAgICBtdWx0aXBsaWVyOiA4LFxuICAgICAgICByb3dfd2lkdGg6IDIwLFxuICAgICAgICBhbmltYXRpb25fc3BlZWQ6IDI1MCxcbiAgICAgICAgYW5pbWF0aW9uX3R5cGU6ICdiYWNrb3V0JyAvLyBvcHRpb25zOiBiYWNraW4sIGJhY2tvdXQsIGJvdW5jZSwgZWFzZWluLCBlYXNlaW5vdXQsIGVhc2VvdXQsIGxpbmVhclxuICAgIH0sXG5cbiAgICBOUyA6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG5cbiAgICBpbml0IDogZnVuY3Rpb24gKHNjb3BlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlIHx8ICdpbnB1dC5jb2xvci1waWNrZXInO1xuXG4gICAgICAgIHZhciBwaWNrZXJzID0gdGhpcy5zY29wZSBpbnN0YW5jZW9mIGpRdWVyeSA/IHRoaXMuc2NvcGUgOiAkKHRoaXMuc2NvcGUpO1xuXG4gICAgICAgICQuZXh0ZW5kKHRydWUsIHRoaXMuc2V0dGluZ3MsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwaWNrZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHBpY2tlcnMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaXMoJzppbnB1dCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmF0dHIoJ3R5cGUnLCdoaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKCdvcHRpb25zJywge2NvbG9yOiBpbnB1dC52YWwoKX0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmJ1aWxkKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGlzLmV2ZW50cygpO1xuICAgIH0sXG5cbiAgICBzZXRDb2xvciA6IGZ1bmN0aW9uKGlucHV0LCBjb2xvciwgc3ZnKSB7XG4gICAgICAgIGlmICghc3ZnKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gJCh0aGlzLmlkZW50aWZpZXIoaW5wdXQpKSxcbiAgICAgICAgICAgICAgICBzdmcgPSAkKCdzdmcnLCBjb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbG9yICYmIGNvbG9yLmxlbmd0aCA9PSA2KSBjb2xvciA9ICcjJyArIGNvbG9yO1xuXG4gICAgICAgIHZhciBjaXJjbGUgPSBTbmFwKCQoJy5zZWxlY3RlZC1jb2xvcicsIHN2ZylbMF0pO1xuICAgICAgICBjaXJjbGUuYXR0cih7XG4gICAgICAgICAgICBvcGFjaXR5OiBjb2xvciA/IDEgOiAwLFxuICAgICAgICAgICAgZmlsbDogY29sb3IgfHwgXCIjMDAwMDAwXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGlucHV0LmlzKCc6aW5wdXQnKSkge1xuICAgICAgICAgICAgaW5wdXQudmFsKGNvbG9yKTtcblxuICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYnVpbGQgOiBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3NldHRpbmdzID0gJC5leHRlbmQoe30sIHRoaXMuc2V0dGluZ3MsIG9wdGlvbnMsIGlucHV0LmRhdGEoJ29wdGlvbnMnKSk7XG4gICAgICAgIGlucHV0LmRhdGEoJ3NldHRpbmdzJywgX3NldHRpbmdzKTtcblxuICAgICAgICBpZiAoIWlucHV0LmRhdGEoJ2NvbG9yLWlkJykpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IFwiY29sb3JcIiArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSoxMDAwMCksXG4gICAgICAgICAgICAgICAgZGl2ID0gJCgnPGRpdiBpZD1cIicraWQrJ1wiIGNsYXNzPVwiY29sb3Itc3ZnLXBpY2tlclwiLz4nKTtcbiAgICAgICAgICAgIGlucHV0LmRhdGEoJ2NvbG9yLWlkJywgaWQpO1xuICAgICAgICAgICAgJChpbnB1dCkuYWZ0ZXIoZGl2KTtcbiAgICAgICAgICAgIGRpdi53aWR0aChfc2V0dGluZ3Muc2l6ZSkuaGVpZ2h0KF9zZXR0aW5ncy5zaXplKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZURPTShzZWxmLnBpY2tlcihpbnB1dCkpO1xuICAgICAgICAgICAgc2VsZi5ldmVudHMoaW5wdXQsIF9zZXR0aW5ncyk7XG4gICAgICAgIH0sIDEpO1xuICAgIH0sXG5cbiAgICBldmVudHMgOiBmdW5jdGlvbiAoaW5wdXQsIHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAkKCdzdmcnLCB0aGlzLmlkZW50aWZpZXIoaW5wdXQpKS5ob3ZlcihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgZGltZW4gPSBzZXR0aW5ncy5zaXplICsgc2VsZi5wYWRkaW5nKHNldHRpbmdzKSoyO1xuICAgICAgICAgICAgJCh0aGlzKS53aWR0aChkaW1lbikuaGVpZ2h0KGRpbWVuKVswXS5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCBbJzAgMCcsZGltZW4sZGltZW5dLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICAkKHRoaXMpLmNzcyh7bWFyZ2luOiAtc2VsZi5wYWRkaW5nKHNldHRpbmdzKX0pO1xuXG4gICAgICAgICAgICBzZWxmLmFuaW1hdGVIb3ZlcihpbnB1dCwgc2V0dGluZ3MpO1xuICAgICAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBzZWxmLmNsb3NlKGlucHV0LCBzZXR0aW5ncywgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBjbG9zZTogZnVuY3Rpb24gKGlucHV0LCBzZXR0aW5ncywgc3ZnKSB7XG4gICAgICAgIHZhciBkaW1lbiA9IHNldHRpbmdzLnNpemUsXG4gICAgICAgICAgICBlbGVtID0gc3ZnIHx8ICQoJ3N2ZycsIHRoaXMuaWRlbnRpZmllcihpbnB1dCkpLFxuICAgICAgICAgICAgcGFkZGluZyA9IHRoaXMucGFkZGluZyhzZXR0aW5ncyk7XG5cbiAgICAgICAgdGhpcy5hbmltYXRlSG92ZXIoaW5wdXQsIHNldHRpbmdzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoZWxlbSkud2lkdGgoZGltZW4pLmhlaWdodChkaW1lbilbMF0uc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgW3BhZGRpbmcscGFkZGluZyxkaW1lbixkaW1lbl0uam9pbignICcpKTtcbiAgICAgICAgICAgICQoZWxlbSkuY3NzKHttYXJnaW46IDB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHVwZGF0ZURPTSA6IGZ1bmN0aW9uIChwYXJ0cykge1xuICAgICAgICB2YXIgaW5wdXQgPSBwYXJ0c1swXSxcbiAgICAgICAgICAgIGdyYXBoID0gcGFydHNbMV07XG5cbiAgICAgICAgcmV0dXJuICQodGhpcy5pZGVudGlmaWVyKGlucHV0KSkuaHRtbChncmFwaCk7XG4gICAgfSxcblxuICAgIGFuaW1hdGVIb3ZlciA6IGZ1bmN0aW9uKGlucHV0LCBzZXR0aW5ncywgY2xvc2VfY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9ICQodGhpcy5pZGVudGlmaWVyKGlucHV0KSksXG4gICAgICAgICAgICBzdmcgPSAkKCdzdmcnLCBjb250YWluZXIpLFxuICAgICAgICAgICAgYmFzZSA9IHNldHRpbmdzLnNpemUgKyAodGhpcy5wYWRkaW5nKHNldHRpbmdzKSoyKSxcbiAgICAgICAgICAgIGN4ID0gYmFzZS8yLFxuICAgICAgICAgICAgY3kgPSBiYXNlLyAyO1xuXG4gICAgICAgIHZhciBncm91cHMgPSAkKCdnW2RhdGEtaWRdJywgc3ZnKTtcblxuICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IGdyb3Vwcy5sZW5ndGg7IGcrKykge1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBzW2ddLFxuICAgICAgICAgICAgICAgIGlkID0gcGFyc2VJbnQoZ3JvdXAuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJykucmVwbGFjZShcImdcIixcIlwiKSwgMTApLFxuICAgICAgICAgICAgICAgIHNjYWxlID0gY2xvc2VfY2FsbGJhY2sgPyAxIDogaWQgKyAyLFxuICAgICAgICAgICAgICAgIGRvX2NhbGxiYWNrID0gZyA9PSAwLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IHNldHRpbmdzLmFuaW1hdGlvbl90eXBlLFxuICAgICAgICAgICAgICAgIHNwZWVkID0gc2V0dGluZ3MuYW5pbWF0aW9uX3NwZWVkICogKGcrMSk7XG5cbiAgICAgICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNsb3NlX2NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYWxmID0gc2V0dGluZ3Muc2l6ZS8yO1xuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IChoYWxmLTUpIC8gaGFsZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gJ2Vhc2Vpbic7XG4gICAgICAgICAgICAgICAgc3BlZWQgPSBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQgKiAxLjU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNuYXAoZ3JvdXApLnN0b3AoKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiAncycgKyBzY2FsZSArICcgJyArIHNjYWxlICsgJyAnICsgY3ggKyAnICcgKyBjeVxuICAgICAgICAgICAgfSwgc3BlZWQsIG1pbmFbYW5pbWF0aW9uXSwgZG9fY2FsbGJhY2sgPyBjbG9zZV9jYWxsYmFjayB8fCBudWxsIDogbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2lyY2xlID0gJCgnLnNlbGVjdGVkLWNvbG9yJywgc3ZnKVswXSxcbiAgICAgICAgICAgIGNpciA9IFNuYXAoY2lyY2xlKTtcbiAgICAgICAgY2lyLnN0b3AoKS5hbmltYXRlKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3MnICsgc2NhbGUgKyAnICcgKyBzY2FsZSArICcgJyArIGN4ICsgJyAnICsgY3lcbiAgICAgICAgfSwgc3BlZWQsIG1pbmFbYW5pbWF0aW9uXSk7XG4gICAgfSxcblxuICAgIHBpY2tlcjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gaW5wdXQuZGF0YSgnc2V0dGluZ3MnKSxcbiAgICAgICAgICAgIHN2ZyA9IHRoaXMuc3ZnKGlucHV0LCBzZXR0aW5ncyksXG4gICAgICAgICAgICBjb250YWluZXIgPSAkKHRoaXMuaWRlbnRpZmllcihpbnB1dCkpLFxuICAgICAgICAgICAgYmFzZSA9IGNvbnRhaW5lci5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICBwYWRkaW5nID0gdGhpcy5wYWRkaW5nKHNldHRpbmdzKTtcblxuICAgICAgICB2YXIgX2NvbG9ycyA9IHRoaXMuZGVmYXVsdENvbG9ycy5zbGljZSgpO1xuICAgICAgICBfY29sb3JzLnJldmVyc2UoKTtcbiAgICAgICAgLy8gQWRkIHRoZSBsYXN0IGdyb3VwIHR3aWNlIHRoZSBlZmZlY3RcbiAgICAgICAgLy8gVE9ETzogQWxsb3cgbXVsdGlwbGUgY29sb3JzIGZvciBkaXNwbGF5OiBfY29sb3JzLnB1c2goX2NvbG9yc1tfY29sb3JzLmxlbmd0aC0xXSk7XG5cbiAgICAgICAgZm9yICh2YXIgYz0wOyBjIDwgX2NvbG9ycy5sZW5ndGg7IGMrKykge1xuXG4gICAgICAgICAgICB2YXIgc3RhcnRfYW5nbGUgPSAwLFxuICAgICAgICAgICAgICAgIGFuZ2xlID0gKDEgLyBfY29sb3JzW2NdLmxlbmd0aCkgKiBNYXRoLlBJICogMixcbiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbG9yc1tjXSxcbiAgICAgICAgICAgICAgICBsZXZlbCA9IF9jb2xvcnMubGVuZ3RoIC0gKGMrMSk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBlbmRfYW5nbGUgPSBzdGFydF9hbmdsZSArIGFuZ2xlO1xuICAgICAgICAgICAgICAgIHZhciBjeCA9IChiYXNlIC8gMikgKyBwYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICBjeSA9IChiYXNlIC8gMikgKyBwYWRkaW5nLFxuICAgICAgICAgICAgICAgICAgICByID0gIChiYXNlIC8gMiksXG4gICAgICAgICAgICAgICAgICAgIGlubmVyUiA9IHIgLSA1LFxuICAgICAgICAgICAgICAgICAgICBwaWQgPSBbbGV2ZWwsaV0uam9pbignJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdfcGF0aCA9ICQoJ3BhdGhbZGF0YS1pZD1cInMnICsgcGlkICsgJ1wiXScsIHN2Zyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdfcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZXhpc3RpbmdfcGF0aFswXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMuc3ZnX29iaigncGF0aCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYW5udWxhcl9zZWN0b3IocGF0aCwge1xuICAgICAgICAgICAgICAgICAgICBjZW50ZXJYOmN4LCBjZW50ZXJZOmN5LFxuICAgICAgICAgICAgICAgICAgICBzdGFydERlZ3JlZXM6c3RhcnRfYW5nbGUsIGVuZERlZ3JlZXM6ZW5kX2FuZ2xlLFxuICAgICAgICAgICAgICAgICAgICBpbm5lclJhZGl1czogbGV2ZWw9PTAgPyAwIDogKChpbm5lclIgKyAoKGxldmVsLTEpICogc2V0dGluZ3Mucm93X3dpZHRoKSkgLyAobGV2ZWwrMikpLFxuICAgICAgICAgICAgICAgICAgICBvdXRlclJhZGl1czogbGV2ZWw9PTAgPyByIDogKChpbm5lclIgKyAoKGxldmVsKSAqIHNldHRpbmdzLnJvd193aWR0aCkpIC8gKGxldmVsKzIpKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0X2F0dHIocGF0aCwge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiAnIycrZGF0YVtpXSxcbiAgICAgICAgICAgICAgICAgICAgLy9zdHJva2U6IHNldHRpbmdzLnN0cm9rZV9jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgLy8nc3Ryb2tlV2lkdGgnOiBzZXR0aW5ncy5zdHJva2Vfd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLWN4JyA6IGN4LFxuICAgICAgICAgICAgICAgICAgICAnZGF0YS1jeScgOiBjeSxcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtaWQnIDogJ3MnICsgcGlkXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdfZ3JvdXAgPSAkKCdnW2RhdGEtaWQ9ZycgKyBsZXZlbCArICddJywgc3ZnKTtcblxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ19ncm91cC5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnID0gdGhpcy5zdmdfb2JqKCdnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCAnZycgKyBsZXZlbCk7XG4gICAgICAgICAgICAgICAgICAgIGcuYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChnKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdfZ3JvdXBbMF0uYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IFNuYXAocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShlbCwgY3gsIGN5LCBzZXR0aW5ncywgbGV2ZWwpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbihlbCwgaW5wdXQsIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgbmV4dCB3ZWRnZSBiZWdpbnMgd2hlcmUgdGhpcyBvbmUgZW5kc1xuICAgICAgICAgICAgICAgIHN0YXJ0X2FuZ2xlID0gZW5kX2FuZ2xlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNucCA9IFNuYXAoc3ZnKSxcbiAgICAgICAgICAgIGNvbG9yZWRDaXJjbGUgPSBzbnAuY2lyY2xlKGN4LCBjeSwgKGJhc2UvMikrMC4xKSxcbiAgICAgICAgICAgIGNpcmNsZU92ZXJsYXkgPSBTbmFwKHN2ZykuY2lyY2xlKGN4LCBjeSwgKGJhc2UgLyAyKS01KTtcblxuICAgICAgICBjb2xvcmVkQ2lyY2xlLmF0dHIoe1xuICAgICAgICAgICAgJ2NsYXNzJzogJ3NlbGVjdGVkLWNvbG9yJ1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNldENvbG9yKGlucHV0LCBzZXR0aW5ncy5jb2xvciwgc3ZnKTtcblxuICAgICAgICBjaXJjbGVPdmVybGF5LmF0dHIoe1xuICAgICAgICAgICAgJ2NsYXNzJzogJ2ljb24nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBwZW5jaWwgPSB0aGlzLnN2Z19vYmooJ2cnKSxcbiAgICAgICAgICAgIHBpbm5lciA9IHRoaXMuc3ZnX29iaigncGF0aCcpO1xuICAgICAgICB0aGlzLnNldF9hdHRyKHBlbmNpbCwge1xuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IFwidHJhbnNsYXRlKFwiK1tjeC03LGN5LTddLmpvaW4oJyAnKStcIilcIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRfYXR0cihwaW5uZXIsIHtcbiAgICAgICAgICAgICdkJzogXCJNMy40LDEyLjhMNC4yLDEyTDIsOS44bC0wLjgsMC44djFoMS4ydjEuMkgzLjR6IE04LjIsNC4yQzguMiw0LjEsOC4xLDQsOCw0Yy0wLjEsMC0wLjEsMC0wLjIsMC4xbC01LDVjMCwwLTAuMSwwLjEtMC4xLDAuMmMwLDAuMSwwLjEsMC4yLDAuMiwwLjJjMC4xLDAsMC4xLDAsMC4yLTAuMWw1LTVDOC4yLDQuNCw4LjIsNC4zLDguMiw0LjJ6IE03LjcsMi41bDMuOCwzLjhMMy44LDE0SDB2LTMuOCBMNy43LDIuNXogTTE0LDMuNGMwLDAuMy0wLjEsMC42LTAuMywwLjhsLTEuNSwxLjVMOC4zLDEuOWwxLjUtMS41QzEwLDAuMSwxMC4zLDAsMTAuNiwwYzAuMywwLDAuNiwwLjEsMC44LDAuNGwyLjIsMi4yIEMxMy45LDIuOCwxNCwzLDE0LDMuNHpcIixcbiAgICAgICAgICAgICdjbGFzcyc6IFwicGVuY2lsXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHBlbmNpbC5hcHBlbmRDaGlsZChwaW5uZXIpO1xuICAgICAgICBzdmcuYXBwZW5kQ2hpbGQocGVuY2lsKTtcblxuICAgICAgICByZXR1cm4gW2lucHV0LCBzdmddO1xuICAgIH0sXG5cbiAgICBhY3Rpb24gOiBmdW5jdGlvbiAoZWwsIGlucHV0LCBzZXR0aW5ncykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgZWwuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBTbmFwKGUudGFyZ2V0KTtcblxuICAgICAgICAgICAgdmFyIGNvbG9yID0gcGF0aC5hdHRyKCdmaWxsJyk7XG4gICAgICAgICAgICBwYXRoLmF0dHIoe1xuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAwXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi5zZXRDb2xvcihpbnB1dCwgY29sb3IpO1xuXG4gICAgICAgICAgICBzZWxmLmNsb3NlKGlucHV0LCBzZXR0aW5ncyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgYW5pbWF0ZSA6IGZ1bmN0aW9uIChlbCwgY3gsIGN5LCBzZXR0aW5ncywgbGV2ZWwpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgYmFzZV9zY2FsZSA9IDEsXG4gICAgICAgICAgICBzY2FsZSA9IGJhc2Vfc2NhbGUgKyAwLjA1O1xuXG4gICAgICAgIGVsLmhvdmVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IFNuYXAoZS50YXJnZXQpO1xuXG4gICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBmcm9udFxuICAgICAgICAgICAgcGF0aC5hcHBlbmRUbyhwYXRoLnBhcmVudCgpKTtcblxuICAgICAgICAgICAgcGF0aC5hdHRyKHtcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMS8obGV2ZWwrIDIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBhdGguc3RvcCgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3MnICsgc2NhbGUgKyAnICcgKyBzY2FsZSArICcgJyArIGN4ICsgJyAnICsgY3lcbiAgICAgICAgICAgIH0sIHNldHRpbmdzLmFuaW1hdGlvbl9zcGVlZCwgbWluYVtzZXR0aW5ncy5hbmltYXRpb25fdHlwZV0pO1xuXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IFNuYXAoZS50YXJnZXQpO1xuXG4gICAgICAgICAgICBwYXRoLmF0dHIoe1xuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBhdGguc3RvcCgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3MnICsgYmFzZV9zY2FsZSArICcgJyArIGJhc2Vfc2NhbGUgKyAnICcgKyBjeCArICcgJyArIGN5XG4gICAgICAgICAgICB9LCBzZXR0aW5ncy5hbmltYXRpb25fc3BlZWQsIG1pbmFbc2V0dGluZ3MuYW5pbWF0aW9uX3R5cGVdKTtcbiAgICAgICAgfSk7XG5cbiAgICB9LFxuXG5cbiAgICBhbm51bGFyX3NlY3RvciA6IGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBvcHRzID0gb3B0aW9uc1dpdGhEZWZhdWx0cyhvcHRpb25zKTtcblxuICAgICAgICB2YXIgcCA9IFsgLy8gcG9pbnRzXG4gICAgICAgICAgICBbb3B0cy5jeCArIG9wdHMucjIqTWF0aC5zaW4ob3B0cy5zdGFydFJhZGlhbnMpLFxuICAgICAgICAgICAgICAgIG9wdHMuY3kgLSBvcHRzLnIyKk1hdGguY29zKG9wdHMuc3RhcnRSYWRpYW5zKV0sXG4gICAgICAgICAgICBbb3B0cy5jeCArIG9wdHMucjIqTWF0aC5zaW4ob3B0cy5jbG9zZVJhZGlhbnMpLFxuICAgICAgICAgICAgICAgIG9wdHMuY3kgLSBvcHRzLnIyKk1hdGguY29zKG9wdHMuY2xvc2VSYWRpYW5zKV0sXG4gICAgICAgICAgICBbb3B0cy5jeCArIG9wdHMucjEqTWF0aC5zaW4ob3B0cy5jbG9zZVJhZGlhbnMpLFxuICAgICAgICAgICAgICAgIG9wdHMuY3kgLSBvcHRzLnIxKk1hdGguY29zKG9wdHMuY2xvc2VSYWRpYW5zKV0sXG4gICAgICAgICAgICBbb3B0cy5jeCArIG9wdHMucjEqTWF0aC5zaW4ob3B0cy5zdGFydFJhZGlhbnMpLFxuICAgICAgICAgICAgICAgIG9wdHMuY3kgLSBvcHRzLnIxKk1hdGguY29zKG9wdHMuc3RhcnRSYWRpYW5zKV0sXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIGFuZ2xlRGlmZiA9IG9wdHMuY2xvc2VSYWRpYW5zIC0gb3B0cy5zdGFydFJhZGlhbnM7XG4gICAgICAgIHZhciBsYXJnZUFyYyA9IChhbmdsZURpZmYgJSAoTWF0aC5QSSoyKSkgPiBNYXRoLlBJID8gMSA6IDA7XG4gICAgICAgIHZhciBjbWRzID0gW107XG4gICAgICAgIGNtZHMucHVzaChcIk1cIitwWzBdLmpvaW4oKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIHRvIFAwXG4gICAgICAgIGNtZHMucHVzaChcIkFcIitbb3B0cy5yMixvcHRzLnIyLDAsbGFyZ2VBcmMsMSxwWzFdXS5qb2luKCkpOyAvLyBBcmMgdG8gIFAxXG4gICAgICAgIGNtZHMucHVzaChcIkxcIitwWzJdLmpvaW4oKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMaW5lIHRvIFAyXG4gICAgICAgIGNtZHMucHVzaChcIkFcIitbb3B0cy5yMSxvcHRzLnIxLDAsbGFyZ2VBcmMsMCxwWzNdXS5qb2luKCkpOyAvLyBBcmMgdG8gIFAzXG4gICAgICAgIGNtZHMucHVzaChcInpcIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbG9zZSBwYXRoIChMaW5lIHRvIFAwKVxuICAgICAgICB0aGlzLnNldF9hdHRyKHBhdGgsIHtcbiAgICAgICAgICAgICdzdHJva2UnOiAnd2hpdGUnLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAsXG4gICAgICAgICAgICAnZCc6IGNtZHMuam9pbignICcpXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgZnVuY3Rpb24gb3B0aW9uc1dpdGhEZWZhdWx0cyhvKXtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBvYmplY3Qgc28gdGhhdCB3ZSBkb24ndCBtdXRhdGUgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICB2YXIgbzIgPSB7XG4gICAgICAgICAgICAgICAgY3ggICAgICAgICAgIDogby5jZW50ZXJYIHx8IDAsXG4gICAgICAgICAgICAgICAgY3kgICAgICAgICAgIDogby5jZW50ZXJZIHx8IDAsXG4gICAgICAgICAgICAgICAgc3RhcnRSYWRpYW5zIDogKG8uc3RhcnREZWdyZWVzIHx8IDApLFxuICAgICAgICAgICAgICAgIGNsb3NlUmFkaWFucyA6IChvLmVuZERlZ3JlZXMgICB8fCAwKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB0ID0gby50aGlja25lc3MhPT11bmRlZmluZWQgPyBvLnRoaWNrbmVzcyA6IDEwMDtcbiAgICAgICAgICAgIGlmIChvLmlubmVyUmFkaXVzIT09dW5kZWZpbmVkKSAgICAgIG8yLnIxID0gby5pbm5lclJhZGl1cztcbiAgICAgICAgICAgIGVsc2UgaWYgKG8ub3V0ZXJSYWRpdXMhPT11bmRlZmluZWQpIG8yLnIxID0gby5vdXRlclJhZGl1cyAtIHQ7XG4gICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvMi5yMSA9IDIwMCAgICAgICAgICAgLSB0O1xuICAgICAgICAgICAgaWYgKG8ub3V0ZXJSYWRpdXMhPT11bmRlZmluZWQpICAgICAgbzIucjIgPSBvLm91dGVyUmFkaXVzO1xuICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbzIucjIgPSBvMi5yMSAgICAgICAgICsgdDtcblxuICAgICAgICAgICAgaWYgKG8yLnIxPDApIG8yLnIxID0gMDtcbiAgICAgICAgICAgIGlmIChvMi5yMjwwKSBvMi5yMiA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiBvMjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwYWRkaW5nIDogZnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmRlZmF1bHRDb2xvcnMubGVuZ3RoLTEpICogc2V0dGluZ3Mucm93X3dpZHRoO1xuICAgIH0sXG4gICAgc3ZnIDogZnVuY3Rpb24gKGlucHV0LCBzZXR0aW5ncykge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gJCh0aGlzLmlkZW50aWZpZXIoaW5wdXQpKSxcbiAgICAgICAgICAgIHN2ZyA9ICQoJ3N2ZycsIGNvbnRhaW5lciksXG4gICAgICAgICAgICB3aWR0aCA9IGNvbnRhaW5lci53aWR0aCgpLFxuICAgICAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVyLmhlaWdodCgpO1xuXG4gICAgICAgIGlmIChzdmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3ZnID0gc3ZnWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN2ZyA9IHRoaXMuc3ZnX29iaignc3ZnJyk7XG4gICAgICAgICAgICBzdmcud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHN2Zy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFkZGluZyA9IHRoaXMucGFkZGluZyhzZXR0aW5ncyk7XG5cbiAgICAgICAgdmFyIHZpZXdfYm94ID0gcGFkZGluZyArICcgJyArIHBhZGRpbmcgKyAnICcgK1xuICAgICAgICAgICAgKHdpZHRoKSArICcgJyArXG4gICAgICAgICAgICAoaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnNldF9hdHRyKHN2Zywge3dpZHRoOiAnMTAwJScsIGhlaWdodDogJzEwMCUnLCB2aWV3Qm94OiB2aWV3X2JveH0pO1xuXG4gICAgICAgIHJldHVybiBzdmc7XG4gICAgfSxcblxuICAgIGlkZW50aWZpZXIgOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuICcjJyArIGlucHV0LmRhdGEoJ2NvbG9yLWlkJyk7XG4gICAgfSxcblxuICAgIHRocm90dGxlIDogZnVuY3Rpb24oZnVuLCBkZWxheSkge1xuICAgICAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBzdmdfb2JqIDogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh0aGlzLk5TLCB0eXBlKTtcbiAgICB9LFxuXG4gICAgdGlja3M6IGZ1bmN0aW9uIChtaW4sIG1heCwgY291bnQpIHtcbiAgICAgICAgdmFyIHNwYW4gPSBtYXggLSBtaW4sXG4gICAgICAgICAgICBzdGVwID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3BhbiAvIGNvdW50KSAvIE1hdGguTE4xMCkpLFxuICAgICAgICAgICAgZXJyID0gY291bnQgLyBzcGFuICogc3RlcDtcblxuICAgICAgICAvLyBGaWx0ZXIgdGlja3MgdG8gZ2V0IGNsb3NlciB0byB0aGUgZGVzaXJlZCBjb3VudC5cbiAgICAgICAgaWYgKGVyciA8PSAuMTUpIHN0ZXAgKj0gMTA7XG4gICAgICAgIGVsc2UgaWYgKGVyciA8PSAuMzUpIHN0ZXAgKj0gNTtcbiAgICAgICAgZWxzZSBpZiAoZXJyIDw9IC43NSkgc3RlcCAqPSAyO1xuXG4gICAgICAgIC8vIFJvdW5kIHN0YXJ0IGFuZCBzdG9wIHZhbHVlcyB0byBzdGVwIGludGVydmFsLlxuICAgICAgICB2YXIgdHN0YXJ0ID0gTWF0aC5jZWlsKG1pbiAvIHN0ZXApICogc3RlcCxcbiAgICAgICAgICAgIHRzdG9wID0gTWF0aC5mbG9vcihtYXggLyBzdGVwKSAqIHN0ZXAgKyBzdGVwICogLjUsXG4gICAgICAgICAgICB0aWNrcyA9IFtdLFxuICAgICAgICAgICAgeDtcblxuICAgICAgICAvLyBub3cgZ2VuZXJhdGUgdGlja3NcbiAgICAgICAgZm9yIChpPXRzdGFydDsgaSA8IHRzdG9wOyBpICs9IHN0ZXApIHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH0sXG5cbiAgICBzZXRfYXR0ciA6IGZ1bmN0aW9uIChub2RlLCBhdHRycykge1xuXG4gICAgICAgIGZvciAoYXR0ciBpbiBhdHRycykge1xuICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGZsaXAgOiBmdW5jdGlvbiAobm9kZSwgaCkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAnICsgaCArJykgc2NhbGUoMSwgLTEpJyk7XG4gICAgfSxcblxuICAgIGRlZmF1bHRDb2xvcnM6IFtcbiAgICAgICAgLy8gSW5uZXIgY2lyY2xlIChub3Qgc2VsZWN0YWJsZSlcbiAgICAgICAgW1xuICAgICAgICAgICAgJ2ZmNWM0ZCcsXG4gICAgICAgICAgICAnZmZiODRkJyxcbiAgICAgICAgICAgICdmZmZmNGQnLFxuICAgICAgICAgICAgJ2JhZmY0ZCcsXG4gICAgICAgICAgICAnNjFiOGIyJyxcbiAgICAgICAgICAgICc2MTVjZmYnLFxuICAgICAgICAgICAgJzllNzlkZicsXG4gICAgICAgICAgICAnYmE1Y2IyJ1xuICAgICAgICBdLFxuICAgICAgICAvLyBGaXJzdCBSb3cgb2YgQ29sb3JzXG4gICAgICAgIFtcbiAgICAgICAgICAgICdjODE3MTcnLFxuICAgICAgICAgICAgJ2Y0NWYyMScsXG4gICAgICAgICAgICAnZmZkODAwJyxcbiAgICAgICAgICAgICcwMDk1MmEnLFxuICAgICAgICAgICAgJzAwYjE5YScsXG4gICAgICAgICAgICAnMTc0YWE3JyxcbiAgICAgICAgICAgICc2OTU0YzQnLFxuICAgICAgICAgICAgJ2IwM2ZhYSdcbiAgICAgICAgXSxcbiAgICAgICAgLy8gU2Vjb25kIFJvdyBvZiBDb2xvcnNcbiAgICAgICAgW1xuICAgICAgICAgICAgJzk4MjQyNCcsXG4gICAgICAgICAgICAnZjEzNDM0JyxcbiAgICAgICAgICAgICdmZjkyNjQnLFxuICAgICAgICAgICAgJ2JhNDcxNycsXG4gICAgICAgICAgICAnY2RhZTAwJyxcbiAgICAgICAgICAgICdmZmViN2QnLFxuICAgICAgICAgICAgJzAwY2MzOScsXG4gICAgICAgICAgICAnMDA2ZTFmJyxcbiAgICAgICAgICAgICcwMDg1NzQnLFxuICAgICAgICAgICAgJzFkZjNkNycsXG4gICAgICAgICAgICAnMzU3NmVjJyxcbiAgICAgICAgICAgICcyMzQwNzUnLFxuICAgICAgICAgICAgJzRhM2I4YycsXG4gICAgICAgICAgICAnOTk4MWZmJyxcbiAgICAgICAgICAgICdlYzU5ZTQnLFxuICAgICAgICAgICAgJzgxMmM3YydcbiAgICAgICAgXSxcblxuICAgICAgICAvLyBPdXRlciBSb3cgb2YgQ29sb3JzXG4gICAgICAgIFtcbiAgICAgICAgICAgIC8vIFJlZFxuICAgICAgICAgICAgJzdhMGUyZCcsXG4gICAgICAgICAgICAnOWMyYjQxJyxcbiAgICAgICAgICAgICdkMjViNzMnLFxuICAgICAgICAgICAgJ2ZlNjA4MCcsXG4gICAgICAgICAgICAvLyBPcmFuZ2VcbiAgICAgICAgICAgICdmZTk0M2UnLFxuICAgICAgICAgICAgJ2NkNjYxMicsXG4gICAgICAgICAgICAnOTU0OTBjJyxcbiAgICAgICAgICAgICc2YzMxMDEnLFxuICAgICAgICAgICAgLy8gWWVsbG93XG4gICAgICAgICAgICAnYTE3OTAwJyxcbiAgICAgICAgICAgICdkMTlkMDAnLFxuICAgICAgICAgICAgJ2ZmYzAwMCcsXG4gICAgICAgICAgICAnZDNjMTYyJyxcbiAgICAgICAgICAgIC8vIEdyZWVuXG4gICAgICAgICAgICAnYmNmZjc2JyxcbiAgICAgICAgICAgICc4OGVjMWYnLFxuICAgICAgICAgICAgJzI3OWE1MicsXG4gICAgICAgICAgICAnMzI2MTAwJyxcbiAgICAgICAgICAgIC8vIFRlYWxcbiAgICAgICAgICAgICcxMDRlNDYnLFxuICAgICAgICAgICAgJzRiODc3ZicsXG4gICAgICAgICAgICAnNmZiYmIxJyxcbiAgICAgICAgICAgICdhNmVhZTEnLFxuICAgICAgICAgICAgLy8gQmx1ZVxuICAgICAgICAgICAgJzM1YWVlYycsXG4gICAgICAgICAgICAnMjQ5MWIwJyxcbiAgICAgICAgICAgICcwZDY0N2QnLFxuICAgICAgICAgICAgJzAwNDI1NScsXG4gICAgICAgICAgICAvLyBQdXJwbGVcbiAgICAgICAgICAgICczMzBlNzEnLFxuICAgICAgICAgICAgJzU0MDBhMycsXG4gICAgICAgICAgICAnODMwMGZmJyxcbiAgICAgICAgICAgICdiNzZhZmYnLFxuICAgICAgICAgICAgLy8gUGlua1xuICAgICAgICAgICAgJ2UxMmJlYycsXG4gICAgICAgICAgICAnYTEwZmFhJyxcbiAgICAgICAgICAgICc3MzBhN2EnLFxuICAgICAgICAgICAgJzRiMDA1MCdcbiAgICAgICAgXVxuXG4gICAgXVxuXG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
