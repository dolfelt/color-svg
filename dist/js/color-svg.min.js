var ColorSVG={version:"0.1.0",settings:{current_color:null,size:40,multiplier:8,row_width:20,animation_speed:250,animation_type:"backout"},NS:"http://www.w3.org/2000/svg",init:function(t,i){var e=this;this.scope=t||"input.color-picker";var a=this.scope instanceof jQuery?this.scope:$(this.scope);$.extend(!0,this.settings,i),a.length>0&&a.each(function(){var t=$(this);return t.is(":input")&&t.attr("type","hidden").data("options",{color:t.val()}),e.build(t,i)})},setColor:function(t,i,e){if(!e)var a=$(this.identifier(t)),e=$("svg",a);i&&6==i.length&&(i="#"+i);var n=Snap($(".selected-color",e)[0]);n.attr({opacity:i?1:0,fill:i||"#000000"}),t.is(":input")&&t.val(i)},rgbToHex:function(t){if("#"===t.charAt(0))return t;var i=/(.*?)rgb\((\d+),\s*(\d+),\s*(\d+)\)/i.exec(t),e=parseInt(i[2],10).toString(16),a=parseInt(i[3],10).toString(16),n=parseInt(i[4],10).toString(16);return(1==e.length?"0"+e:e)+(1==a.length?"0"+a:a)+(1==n.length?"0"+n:n)},getColorCurrentHex:function(){return"undefined"!=typeof current_color?this.rgbToHex(current_color):!1},setColorCurrent:function(t){current_color=t},build:function(t,i){var e=$.extend({},this.settings,i,t.data("options"));if(t.data("settings",e),!t.data("color-id")){var a="color"+Math.round(1e4*Math.random()),n=$('<div id="'+a+'" class="color-svg-picker"/>');t.data("color-id",a),$(t).after(n),n.width(e.size).height(e.size)}var r=this;setTimeout(function(){r.updateDOM(r.picker(t)),r.events(t,e)},1)},events:function(t,i){var e=this;$("svg",this.identifier(t)).hover(function(a){var n=i.size+2*e.padding(i);$(this).width(n).height(n)[0].setAttribute("viewBox",["0 0",n,n].join(" ")),$(this).css({margin:-e.padding(i)}),e.animateHover(t,i)},function(a){e.close(t,i,this)})},close:function(t,i,e){var a=i.size,n=e||$("svg",this.identifier(t)),r=this.padding(i);this.animateHover(t,i,function(){$(n).width(a).height(a)[0].setAttribute("viewBox",[r,r,a,a].join(" ")),$(n).css({margin:0})})},updateDOM:function(t){var i=t[0],e=t[1];return $(this.identifier(i)).html(e)},animateHover:function(t,i,e){for(var a=$(this.identifier(t)),n=$("svg",a),r=i.size+2*this.padding(i),s=r/2,o=r/2,c=$("g[data-id]",n),d=0;d<c.length;d++){var h=c[d],f=parseInt(h.getAttribute("data-id").replace("g",""),10),l=e?1:f+2,u=0==d,v=i.animation_type,p=i.animation_speed*(d+1);if(!f){if(!e){var g=i.size/2;l=(g-5)/g}v="easein",p=1.5*i.animation_speed}Snap(h).stop().animate({transform:"s"+l+" "+l+" "+s+" "+o},p,mina[v],u?e||null:null)}var b=$(".selected-color",n)[0],m=Snap(b);m.stop().animate({transform:"s"+l+" "+l+" "+s+" "+o},p,mina[v])},picker:function(t){var i=t.data("settings"),e=this.svg(t,i),a=$(this.identifier(t)),n=a.outerWidth(),r=this.padding(i),s=this.defaultColors.slice();s.reverse();for(var o=0;o<s.length;o++)for(var c=0,d=1/s[o].length*Math.PI*2,h=s[o],f=s.length-(o+1),l=0;l<h.length;l++){var u=c+d,v=n/2+r,p=n/2+r,g=n/2,b=g-5,m=[f,l].join(""),_=$('path[data-id="s'+m+'"]',e);if(_.length>0)var M=_[0];else var M=this.svg_obj("path");this.annular_sector(M,{centerX:v,centerY:p,startDegrees:c,endDegrees:u,innerRadius:0==f?0:(b+(f-1)*i.row_width)/(f+2),outerRadius:0==f?g:(b+f*i.row_width)/(f+2)}),this.set_attr(M,{fill:"#"+h[l],"data-cx":v,"data-cy":p,"data-id":"s"+m});var w=$("g[data-id=g"+f+"]",e);if(w.length<1){var C=this.svg_obj("g");C.setAttribute("data-id","g"+f),C.appendChild(M),e.appendChild(C)}else w[0].appendChild(M);if(f){var R=Snap(M);this.animate(R,v,p,i,f),this.action(R,t,i)}c=u}var j=Snap(e),y=j.circle(v,p,n/2+.1),S=Snap(e).circle(v,p,n/2-5);y.attr({"class":"selected-color"}),this.setColor(t,i.color,e),S.attr({"class":"icon"});var x=this.svg_obj("g"),k=this.svg_obj("path");return this.set_attr(x,{transform:"translate("+[v-7,p-7].join(" ")+")"}),this.set_attr(k,{d:"M3.4,12.8L4.2,12L2,9.8l-0.8,0.8v1h1.2v1.2H3.4z M8.2,4.2C8.2,4.1,8.1,4,8,4c-0.1,0-0.1,0-0.2,0.1l-5,5c0,0-0.1,0.1-0.1,0.2c0,0.1,0.1,0.2,0.2,0.2c0.1,0,0.1,0,0.2-0.1l5-5C8.2,4.4,8.2,4.3,8.2,4.2z M7.7,2.5l3.8,3.8L3.8,14H0v-3.8 L7.7,2.5z M14,3.4c0,0.3-0.1,0.6-0.3,0.8l-1.5,1.5L8.3,1.9l1.5-1.5C10,0.1,10.3,0,10.6,0c0.3,0,0.6,0.1,0.8,0.4l2.2,2.2 C13.9,2.8,14,3,14,3.4z","class":"pencil"}),x.appendChild(k),e.appendChild(x),[t,e]},eventHandler:function(){"undefined"!=typeof this.settings.eventHandler&&this.settings.eventHandler()},action:function(t,i,e){var a=this;t.click(function(t){var n=Snap(t.target),r=n.attr("fill");n.attr({strokeWidth:0}),a.setColor(i,r),a.close(i,e),a.eventHandler()})},animate:function(t,i,e,a,n){var r=1,s=r+.05;t.hover(function(t){var r=Snap(t.target);r.appendTo(r.parent()),r.attr({strokeWidth:1/(n+2)}),r.stop().animate({transform:"s"+s+" "+s+" "+i+" "+e},a.animation_speed,mina[a.animation_type])},function(t){var n=Snap(t.target);n.attr({strokeWidth:0}),n.stop().animate({transform:"s"+r+" "+r+" "+i+" "+e},a.animation_speed,mina[a.animation_type])})},annular_sector:function(t,i){function e(t){var i={cx:t.centerX||0,cy:t.centerY||0,startRadians:t.startDegrees||0,closeRadians:t.endDegrees||0},e=void 0!==t.thickness?t.thickness:100;return i.r1=void 0!==t.innerRadius?t.innerRadius:void 0!==t.outerRadius?t.outerRadius-e:200-e,i.r2=void 0!==t.outerRadius?t.outerRadius:i.r1+e,i.r1<0&&(i.r1=0),i.r2<0&&(i.r2=0),i}var a=e(i),n=[[a.cx+a.r2*Math.sin(a.startRadians),a.cy-a.r2*Math.cos(a.startRadians)],[a.cx+a.r2*Math.sin(a.closeRadians),a.cy-a.r2*Math.cos(a.closeRadians)],[a.cx+a.r1*Math.sin(a.closeRadians),a.cy-a.r1*Math.cos(a.closeRadians)],[a.cx+a.r1*Math.sin(a.startRadians),a.cy-a.r1*Math.cos(a.startRadians)]],r=a.closeRadians-a.startRadians,s=r%(2*Math.PI)>Math.PI?1:0,o=[];o.push("M"+n[0].join()),o.push("A"+[a.r2,a.r2,0,s,1,n[1]].join()),o.push("L"+n[2].join()),o.push("A"+[a.r1,a.r1,0,s,0,n[3]].join()),o.push("z"),this.set_attr(t,{stroke:"white","stroke-width":0,d:o.join(" ")})},padding:function(t){return(this.defaultColors.length-1)*t.row_width},svg:function(t,i){var e=$(this.identifier(t)),a=$("svg",e),n=e.width(),r=e.height();if(a.length>0)a=a[0];else{var a=this.svg_obj("svg");a.width=n,a.height=r}var s=this.padding(i),o=s+" "+s+" "+n+" "+r;return this.set_attr(a,{width:"100%",height:"100%",viewBox:o}),a},identifier:function(t){return"#"+t.data("color-id")},throttle:function(t,i){var e=null;return function(){var a=this,n=arguments;clearTimeout(e),e=setTimeout(function(){t.apply(a,n)},i)}},svg_obj:function(t){return document.createElementNS(this.NS,t)},ticks:function(t,e,a){var n=e-t,r=Math.pow(10,Math.floor(Math.log(n/a)/Math.LN10)),s=a/n*r;.15>=s?r*=10:.35>=s?r*=5:.75>=s&&(r*=2);var o=Math.ceil(t/r)*r,c=Math.floor(e/r)*r+.5*r,d=[];for(i=o;i<c;i+=r)d.push(i);return d},set_attr:function(t,i){for(attr in i)t.setAttribute(attr,i[attr]);return this},flip:function(t,i){t.setAttribute("transform","translate(0, "+i+") scale(1, -1)")},defaultColors:[["ff5c4d","ffb84d","ffff4d","baff4d","61b8b2","615cff","9e79df","ba5cb2"],["c81717","f45f21","ffd800","00952a","00b19a","174aa7","6954c4","b03faa"],["982424","f13434","ff9264","ba4717","cdae00","ffeb7d","00cc39","006e1f","008574","1df3d7","3576ec","234075","4a3b8c","9981ff","ec59e4","812c7c"],["7a0e2d","9c2b41","d25b73","fe6080","fe943e","cd6612","95490c","6c3101","a17900","d19d00","ffc000","d3c162","bcff76","88ec1f","279a52","326100","104e46","4b877f","6fbbb1","a6eae1","35aeec","2491b0","0d647d","004255","330e71","5400a3","8300ff","b76aff","e12bec","a10faa","730a7a","4b0050"]]};
//# sourceMappingURL=data:application/json;base64,
