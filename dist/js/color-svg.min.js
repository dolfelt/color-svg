var ColorSVG={version:"0.1.0",settings:{current_color:null,size:40,multiplier:8,row_width:20,animation_speed:250,animation_type:"backout"},NS:"http://www.w3.org/2000/svg",init:function(t,i){var a=this;this.scope=t||"input.color-picker";var e=this.scope instanceof jQuery?this.scope:$(this.scope);$.extend(!0,this.settings,i),e.length>0&&e.each(function(){var t=$(this);return t.is(":input")&&t.attr("type","hidden").data("options",{color:t.val()}),a.build(t,i)})},setColor:function(t,i,a){if(!a)var e=$(this.identifier(t)),a=$("svg",e);i&&6==i.length&&(i="#"+i);var n=Snap($(".selected-color",a)[0]);n.attr({opacity:i?1:0,fill:i||"#000000"}),t.is(":input")&&t.val(i)},build:function(t,i){var a=$.extend({},this.settings,i,t.data("options"));if(t.data("settings",a),!t.data("color-id")){var e="color"+Math.round(1e4*Math.random()),n=$('<div id="'+e+'" class="color-svg-picker"/>');t.data("color-id",e),$(t).after(n),n.width(a.size).height(a.size)}var r=this;setTimeout(function(){r.updateDOM(r.picker(t)),r.events(t,a)},1)},events:function(t,i){var a=this;$("svg",this.identifier(t)).hover(function(e){var n=i.size+2*a.padding(i);$(this).width(n).height(n)[0].setAttribute("viewBox",["0 0",n,n].join(" ")),$(this).css({margin:-a.padding(i)}),a.animateHover(t,i)},function(e){a.close(t,i,this)})},close:function(t,i,a){var e=i.size,n=a||$("svg",this.identifier(t)),r=this.padding(i);this.animateHover(t,i,function(){$(n).width(e).height(e)[0].setAttribute("viewBox",[r,r,e,e].join(" ")),$(n).css({margin:0})})},updateDOM:function(t){var i=t[0],a=t[1];return $(this.identifier(i)).html(a)},animateHover:function(t,i,a){for(var e=$(this.identifier(t)),n=$("svg",e),r=i.size+2*this.padding(i),s=r/2,o=r/2,c=$("g[data-id]",n),d=0;d<c.length;d++){var h=c[d],f=parseInt(h.getAttribute("data-id").replace("g",""),10),l=a?1:f+2,u=0==d,v=i.animation_type,p=i.animation_speed*(d+1);if(!f){if(!a){var g=i.size/2;l=(g-5)/g}v="easein",p=1.5*i.animation_speed}Snap(h).stop().animate({transform:"s"+l+" "+l+" "+s+" "+o},p,mina[v],u?a||null:null)}var m=$(".selected-color",n)[0],b=Snap(m);b.stop().animate({transform:"s"+l+" "+l+" "+s+" "+o},p,mina[v])},picker:function(t){var i=t.data("settings"),a=this.svg(t,i),e=$(this.identifier(t)),n=e.outerWidth(),r=this.padding(i),s=this.defaultColors.slice();s.reverse();for(var o=0;o<s.length;o++)for(var c=0,d=1/s[o].length*Math.PI*2,h=s[o],f=s.length-(o+1),l=0;l<h.length;l++){var u=c+d,v=n/2+r,p=n/2+r,g=n/2,m=g-5,b=[f,l].join(""),_=$('path[data-id="s'+b+'"]',a);if(_.length>0)var M=_[0];else var M=this.svg_obj("path");this.annular_sector(M,{centerX:v,centerY:p,startDegrees:c,endDegrees:u,innerRadius:0==f?0:(m+(f-1)*i.row_width)/(f+2),outerRadius:0==f?g:(m+f*i.row_width)/(f+2)}),this.set_attr(M,{fill:"#"+h[l],"data-cx":v,"data-cy":p,"data-id":"s"+b});var w=$("g[data-id=g"+f+"]",a);if(w.length<1){var R=this.svg_obj("g");R.setAttribute("data-id","g"+f),R.appendChild(M),a.appendChild(R)}else w[0].appendChild(M);if(f){var j=Snap(M);this.animate(j,v,p,i,f),this.action(j,t,i)}c=u}var C=Snap(a),k=C.circle(v,p,n/2+.1),y=Snap(a).circle(v,p,n/2-5);k.attr({"class":"selected-color"}),this.setColor(t,i.color,a),y.attr({"class":"icon"});var S=this.svg_obj("g"),z=this.svg_obj("path");return this.set_attr(S,{transform:"translate("+[v-7,p-7].join(" ")+")"}),this.set_attr(z,{d:"M3.4,12.8L4.2,12L2,9.8l-0.8,0.8v1h1.2v1.2H3.4z M8.2,4.2C8.2,4.1,8.1,4,8,4c-0.1,0-0.1,0-0.2,0.1l-5,5c0,0-0.1,0.1-0.1,0.2c0,0.1,0.1,0.2,0.2,0.2c0.1,0,0.1,0,0.2-0.1l5-5C8.2,4.4,8.2,4.3,8.2,4.2z M7.7,2.5l3.8,3.8L3.8,14H0v-3.8 L7.7,2.5z M14,3.4c0,0.3-0.1,0.6-0.3,0.8l-1.5,1.5L8.3,1.9l1.5-1.5C10,0.1,10.3,0,10.6,0c0.3,0,0.6,0.1,0.8,0.4l2.2,2.2 C13.9,2.8,14,3,14,3.4z","class":"pencil"}),S.appendChild(z),a.appendChild(S),[t,a]},action:function(t,i,a){var e=this;t.click(function(t){var n=Snap(t.target),r=n.attr("fill");n.attr({strokeWidth:0}),e.setColor(i,r),e.close(i,a)})},animate:function(t,i,a,e,n){var r=1,s=r+.05;t.hover(function(t){var r=Snap(t.target);r.appendTo(r.parent()),r.attr({strokeWidth:1/(n+2)}),r.stop().animate({transform:"s"+s+" "+s+" "+i+" "+a},e.animation_speed,mina[e.animation_type])},function(t){var n=Snap(t.target);n.attr({strokeWidth:0}),n.stop().animate({transform:"s"+r+" "+r+" "+i+" "+a},e.animation_speed,mina[e.animation_type])})},annular_sector:function(t,i){function a(t){var i={cx:t.centerX||0,cy:t.centerY||0,startRadians:t.startDegrees||0,closeRadians:t.endDegrees||0},a=void 0!==t.thickness?t.thickness:100;return i.r1=void 0!==t.innerRadius?t.innerRadius:void 0!==t.outerRadius?t.outerRadius-a:200-a,i.r2=void 0!==t.outerRadius?t.outerRadius:i.r1+a,i.r1<0&&(i.r1=0),i.r2<0&&(i.r2=0),i}var e=a(i),n=[[e.cx+e.r2*Math.sin(e.startRadians),e.cy-e.r2*Math.cos(e.startRadians)],[e.cx+e.r2*Math.sin(e.closeRadians),e.cy-e.r2*Math.cos(e.closeRadians)],[e.cx+e.r1*Math.sin(e.closeRadians),e.cy-e.r1*Math.cos(e.closeRadians)],[e.cx+e.r1*Math.sin(e.startRadians),e.cy-e.r1*Math.cos(e.startRadians)]],r=e.closeRadians-e.startRadians,s=r%(2*Math.PI)>Math.PI?1:0,o=[];o.push("M"+n[0].join()),o.push("A"+[e.r2,e.r2,0,s,1,n[1]].join()),o.push("L"+n[2].join()),o.push("A"+[e.r1,e.r1,0,s,0,n[3]].join()),o.push("z"),this.set_attr(t,{stroke:"white","stroke-width":0,d:o.join(" ")})},padding:function(t){return(this.defaultColors.length-1)*t.row_width},svg:function(t,i){var a=$(this.identifier(t)),e=$("svg",a),n=a.width(),r=a.height();if(e.length>0)e=e[0];else{var e=this.svg_obj("svg");e.width=n,e.height=r}var s=this.padding(i),o=s+" "+s+" "+n+" "+r;return this.set_attr(e,{width:"100%",height:"100%",viewBox:o}),e},identifier:function(t){return"#"+t.data("color-id")},throttle:function(t,i){var a=null;return function(){var e=this,n=arguments;clearTimeout(a),a=setTimeout(function(){t.apply(e,n)},i)}},svg_obj:function(t){return document.createElementNS(this.NS,t)},ticks:function(t,a,e){var n=a-t,r=Math.pow(10,Math.floor(Math.log(n/e)/Math.LN10)),s=e/n*r;.15>=s?r*=10:.35>=s?r*=5:.75>=s&&(r*=2);var o=Math.ceil(t/r)*r,c=Math.floor(a/r)*r+.5*r,d=[];for(i=o;i<c;i+=r)d.push(i);return d},set_attr:function(t,i){for(attr in i)t.setAttribute(attr,i[attr]);return this},flip:function(t,i){t.setAttribute("transform","translate(0, "+i+") scale(1, -1)")},defaultColors:[["ff5c4d","ffb84d","ffff4d","baff4d","61b8b2","615cff","9e79df","ba5cb2"],["c81717","f45f21","ffd800","00952a","00b19a","174aa7","6954c4","b03faa"],["982424","f13434","ff9264","ba4717","cdae00","ffeb7d","00cc39","006e1f","008574","1df3d7","3576ec","234075","4a3b8c","9981ff","ec59e4","812c7c"],["7a0e2d","9c2b41","d25b73","fe6080","fe943e","cd6612","95490c","6c3101","a17900","d19d00","ffc000","d3c162","bcff76","88ec1f","279a52","326100","104e46","4b877f","6fbbb1","a6eae1","35aeec","2491b0","0d647d","004255","330e71","5400a3","8300ff","b76aff","e12bec","a10faa","730a7a","4b0050"]]};
//# sourceMappingURL=data:application/json;base64,